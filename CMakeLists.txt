CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(OpenConservSolver)

SET(CPACK_PACKAGE_CONTACT "Jens Markussen")
set (CPACK_DEBIAN_PACKAGE_DEPENDS "libglfw3-dev")
set (CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
INCLUDE(CPack)

## Needed to add this include path to build with clang on my system
##SET(CMAKE_CXX_FLAGS "-std=c++11 -DGLM_FORCE_RADIANS -I/usr/include/x86_64-linux-gnu/c++/4.8")
SET(CMAKE_CXX_FLAGS "-std=c++11 -DGLM_FORCE_RADIANS")
IF(APPLE)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
ENDIF()
SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/Modules" CACHE STRING " ")

IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Release" CACHE STRING " " FORCE)
ENDIF()
IF(NOT LIBRARY_OUTPUT_PATH)
  SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
ENDIF()
IF(NOT EXECUTABLE_OUTPUT_PATH)
  SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
ENDIF()

#Set compilation flags
IF(MSVC10)
	#Enable multiprocessor compilation for speed
	IF(NOT CMAKE_CXX_FLAGS MATCHES "/MP")
		SET(CMAKE_CXX_FLAGS " /MP ${CMAKE_CXX_FLAGS}" CACHE STRING " " FORCE)
	ENDIF()
ENDIF()
IF(NOT CMAKE_HOST_WIN32)
	# Enable position independent code for linux build
	IF(NOT CMAKE_CXX_FLAGS MATCHES "-fPIC")
		SET(CMAKE_CXX_FLAGS " -fPIC ${CMAKE_CXX_FLAGS}" CACHE STRING " " FORCE)
	ENDIF()
ENDIF()

#Set the paths we know
FIND_LIBRARY(FRAMEWORK_LIBRARY_DEBUG
	NAMES "Frameworkd.lib" "libFrameworkd.so"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")
FIND_LIBRARY(FRAMEWORK_LIBRARY_RELEASE
	NAMES "Framework.lib" "libFramework.so"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")	
IF(NOT FRAMEWORK_LIBRARY_DEBUG AND NOT FRAMEWORK_LIBRARY_RELEASE) 
	SET(FRAMEWORK_LIBRARIES Framework CACHE FILEPATH " " FORCE)
	LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})
ELSE()
	SET(FRAMEWORK_LIBRARIES debug ${FRAMEWORK_LIBRARY_DEBUG} optimized ${FRAMEWORK_LIBRARY_RELEASE} CACHE FILEPATH "Path to Framework libraries")
ENDIF()

FIND_LIBRARY(FRAMEWORK_STATIC_LIBRARY_DEBUG
	NAMES "Frameworkd.obj" "libFrameworkd.a"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")
FIND_LIBRARY(FRAMEWORK_STATIC_LIBRARY_RELEASE
	NAMES "Framework.obj" "libFramework.a"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")
IF(NOT FRAMEWORK_STATIC_LIBRARY_DEBUG AND NOT FRAMEWORK_STATIC_LIBRARY_RELEASE)
	SET(FRAMEWORK_STATIC_LIBRARIES Framework CACHE FILEPATH " " FORCE)
	LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})
ELSE()
	SET(FRAMEWORK_STATIC_LIBRARIES debug ${FRAMEWORK_STATIC_LIBRARY_DEBUG} optimized ${FRAMEWORK_STATIC_LIBRARY_RELEASE} CACHE FILEPATH "Path to Framework libraries")
ENDIF()

FIND_LIBRARY(C_FRAMEWORK_LIBRARY_DEBUG
	NAMES "CFrameworkd.lib" "libCFrameworkd.so"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")
FIND_LIBRARY(C_FRAMEWORK_LIBRARY_RELEASE
	NAMES "CFramework.lib" "libCFramework.so"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")
IF(NOT C_FRAMEWORK_LIBRARY_DEBUG AND NOT C_FRAMEWORK_LIBRARY_RELEASE)
	SET(C_FRAMEWORK_LIBRARIES CFramework CACHE FILEPATH " " FORCE)
	LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})
ELSE()
	SET(C_FRAMEWORK_LIBRARIES debug ${C_FRAMEWORK_LIBRARY_DEBUG} optimized ${C_FRAMEWORK_LIBRARY_RELEASE} CACHE FILEPATH "Path to Framework libraries")
ENDIF()

FIND_LIBRARY(C_FRAMEWORK_STATIC_LIBRARY_DEBUG
	NAMES "CFrameworkd.obj" "libCFrameworkd.a"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")
FIND_LIBRARY(C_FRAMEWORK_STATIC_LIBRARY_RELEASE
	NAMES "CFramework.obj" "libCFramework.a"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")
IF(NOT C_FRAMEWORK_STATIC_LIBRARY_DEBUG AND NOT C_FRAMEWORK_STATIC_LIBRARY_RELEASE)
	SET(C_FRAMEWORK_STATIC_LIBRARIES CFramework CACHE FILEPATH " " FORCE)
	LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})
ELSE()
	SET(C_FRAMEWORK_STATIC_LIBRARIES debug ${C_FRAMEWORK_STATIC_LIBRARY_DEBUG} optimized ${C_FRAMEWORK_STATIC_LIBRARY_RELEASE} CACHE FILEPATH "Path to Framework_s libraries")
ENDIF()

FIND_LIBRARY(C_VISUALIZER_LIBRARY_DEBUG
	NAMES "CVisualizerd.lib" "libCVisualizerd.so"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")
FIND_LIBRARY(C_VISUALIZER_LIBRARY_RELEASE
	NAMES "CVisualizer.lib" "libCVisualizer.so"
	PATHS "${PROJECT_SOURCE_DIR}/framework/lib/")
IF(NOT C_VISUALIZER_LIBRARY_DEBUG AND NOT C_VISUALIZER_LIBRARY_RELEASE)
	SET(C_VISUALIZER_LIBRARIES CVisualizer CACHE FILEPATH " " FORCE)
	LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})
ELSE()
	SET(C_VISUALIZER_LIBRARIES debug ${C_VISUALIZER_LIBRARY_DEBUG} optimized ${C_VISUALIZER_LIBRARY_RELEASE} CACHE FILEPATH "Path to Framework libraries")
ENDIF()

SET(FRAMEWORK_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/framework/include" CACHE PATH " ")

SET(FRAMEWORK_LIB_DIR "${LIBRARY_OUTPUT_PATH}" CACHE PATH " ")
SET(C_FRAMEWORK_LIB_DIR "${LIBRARY_OUTPUT_PATH}" CACHE PATH " ")

SET(WRAPPER_DIR "${PROJECT_SOURCE_DIR}/wrappers" CACHE PATH " ")
SET(MODULE_DIR "${PROJECT_SOURCE_DIR}/modules" CACHE PATH " ")
SET(MODULE_LIB_DIR "${LIBRARY_OUTPUT_PATH}" CACHE PATH " ")
SET(SIMPLE_PLOT_INCLUDE_DIR "${MODULE_DIR}/simple_plot/include" CACHE PATH " ")

ADD_SUBDIRECTORY(build_tools)
ADD_SUBDIRECTORY(framework)
ADD_SUBDIRECTORY(wrappers)
ADD_SUBDIRECTORY(modules)
ADD_SUBDIRECTORY(demo)
ADD_SUBDIRECTORY(tests)

